head(video_games)
# Cleaning our dataset
# ---
# OUR CODE GOES BELOW
#
# Now lets find the duplicated rows in the dataset df
# and assign to a variable duplicated_rows below
# ---
#
duplicated_rows <- df[duplicated(df),]
# Lets print out the variable duplicated_rows and see these duplicated rows
# ---
# OUR CODE GOES BELOW
#
duplicated_rows
# Now there is another way we can also remove duplicated rows
# in the dataset or show the unique items;
# We simply use the unique() function
# ---
#
unique_items2 <- unique(df)
# After having assigned the unique items to the variable unique_items2,
# we will now print out this variable and have a look at these unique items
# ---
# OUR CODE GOES BELOW
#
unique_items2
duplicated_rows <- df[duplicated(df),]
nrow(duplicated_rows)
nrow(df)
df <- df[!duplicated(df), ]
nrow(df)
df
library(lubridate, warn.conflicts = FALSE)
df<- read.csv('C:/Users/Admin/Downloads/advertising.csv')
head(df)
ncol(df)
nrow(df)
summary(df)
head(df)
tail(df)
colnames(df)
duplicated_rows <- df[duplicated(df),]
nrow(duplicated_rows)
nrow(df)
df <- df[!duplicated(df), ]
nrow(df)
colSums(is.na(df))
df$Timestamp <- ymd_hms(df$Timestamp)
df$Male <- as.character(df$Male)
df$Male[df$Male == "0"] <- "Female"
df$Male[df$Male == "1"] <- "Male"
df$Male
names(df)[names(df) == "Male"] <- "Gender"
df$Clicked.on.Ad <- as.character(df$Clicked.on.Ad)
df$Clicked.on.Ad[df$Clicked.on.Ad == "0"] <- "No"
df$Clicked.on.Ad[df$Clicked.on.Ad == "1"] <- "Yes"
df$Clicked.on.Ad
df$month <- month(df$Timestamp, label = TRUE)
## Example
# ---
# Let's create the vector A
# ---
#
A <- c(3, 2, 5, 6, 4, 8, 1, 2, 30, 2, 4)
# then print it out
A
# We then plot a boxplot to help us visualise any existing outliers
# ---
#
boxplot(A)
# Then use the function boxplot.stats which lists the outliers in the vectors
# ---
#
boxplot.stats(A)$out
## Example
# ---
# Say from our vector x above, values above 20 are obvious inconsistencies
# then we using logical indices to check for
# ---
#
non_greater_than_20 <- A > 20
# printing out non_greater_than_20
non_greater_than_20
# Challenge
# ---
# Question: Use the given bus dataset below, determine whether there are any obvious inconsistencies
# ---
# Dataset url = http://bit.ly/BusNairobiWesternTransport
# ---
# OUR CODE GOES BELOW
#
# Importing our database
# ---
#
install.package("data.table") # install package data.table to work with data tables
boxplot(df$Daily.Time.Spent.on.Site)
boxplot(df$Age)
boxplot(df$Area.Income)
boxplot(df$Daily.Internet.Usage)
# Challenge
# ---
# Question: Use the given bus dataset below, determine whether there are any obvious inconsistencies
# ---
# Dataset url = http://bit.ly/BusNairobiWesternTransport
# ---
# OUR CODE GOES BELOW
#
# Importing our database
# ---
#
# install.package("data.table") # install package data.table to work with data tables
# library(data.table) # load package
# install.package("tidyverse") # install packages to work with data frame - extends into visualization
# library(tidyverse)
bus_dataset <- fread('http://bit.ly/BusNairobiWesternTransport')
# Previewing the dataset
# ---
#
View(bus_dataset)
str(bus_dataset)
dim(bus_dataset)
class(bus_dataset)
# Identifying the numeric class in the data and evaluating if there are any outliers
# ---
# OUR CODE GOES BELOW
#
# We then plot a boxplot to help us visualise any existing outliers
# ---
#
boxplot(A, "Money")
# We then plot a boxplot to help us visualise any existing outliers
# ---
#
boxplot(A, names = "Money")
boxplot(df$Daily.Time.Spent.on.Site, names = "money")
boxplot(df$Age)
boxplot(df$Area.Income)
boxplot(df$Daily.Internet.Usage)
boxplot(df$Daily.Time.Spent.on.Site, main = "money")
boxplot(df$Age)
boxplot(df$Area.Income)
boxplot(df$Daily.Internet.Usage)
boxplot(df$Daily.Time.Spent.on.Site, main = "Daily Time Spent on Site")
boxplot(df$Age, main = 'Age')
boxplot(df$Area.Income, main = 'The User\'s Income')
boxplot(df$Daily.Internet.Usage, main = 'Daily Internet Usage')
boxplot.stats(df$Area.Income)$out
df$Clicked.on.Ad <- as.character(df$Clicked.on.Ad)
df$Clicked.on.Ad[df$Clicked.on.Ad == "0"] <- "No"
df$Clicked.on.Ad[df$Clicked.on.Ad == "1"] <- "Yes"
colMeans(df)
df$Clicked.on.Ad <- as.character(df$Clicked.on.Ad)
df$Clicked.on.Ad[df$Clicked.on.Ad == "0"] <- "No"
df$Clicked.on.Ad[df$Clicked.on.Ad == "1"] <- "Yes"
unique(df$Clicked.on.Ad)
df$month <- month(df$Timestamp, label = TRUE)
library(tidyverse)
df$month <- month(df$Timestamp, label = TRUE)
df$month <- month(df$Timestamp, label = TRUE)
library(lubridate, warn.conflicts = FALSE)
df<- read.csv('C:/Users/Admin/Downloads/advertising.csv')
head(df)
ncol(df)
nrow(df)
summary(df)
head(df)
tail(df)
colnames(df)
duplicated_rows <- df[duplicated(df),]
nrow(duplicated_rows)
nrow(df)
df <- df[!duplicated(df), ]
nrow(df)
colSums(is.na(df))
boxplot(df$Daily.Time.Spent.on.Site, main = "Daily Time Spent on Site")
boxplot(df$Age, main = 'Age')
boxplot(df$Area.Income, main = 'The User\'s Income')
boxplot(df$Daily.Internet.Usage, main = 'Daily Internet Usage')
boxplot.stats(df$Area.Income)$out
df$Timestamp <- ymd_hms(df$Timestamp)
df$Male <- as.character(df$Male)
df$Male[df$Male == "0"] <- "Female"
df$Male[df$Male == "1"] <- "Male"
df$Male
names(df)[names(df) == "Male"] <- "Gender"
df$Clicked.on.Ad <- as.character(df$Clicked.on.Ad)
df$Clicked.on.Ad[df$Clicked.on.Ad == "0"] <- "No"
df$Clicked.on.Ad[df$Clicked.on.Ad == "1"] <- "Yes"
unique(df$Clicked.on.Ad)
df$month <- month(df$Timestamp, label = TRUE)
colnames(df)
df$hour <- hour(df$Timestamp)
df$hour
df$month <- month(df$Timestamp)
df$month <- as.character(df$month)
unique(df$month)
df$month <- month(df$Timestamp, labels = TRUE)
df$day.of.the.week <- wday(df$Timestamp, label = TRUE)
df$Timestamp <- ymd_hms(df$Timestamp)
devtools::install_github("tidyverse/lubridate")
devtools::install_github("tidyverse/lubridate")
library(lubridate, warn.conflicts = FALSE)
df$month <- month(df$Timestamp, label = TRUE)
df$month <- month(df$Timestamp, label = TRUE)
df$month <- month(df$Timestamp, label = TRUE)
df$month <- month(df$Timestamp, label = TRUE)
df$month <- month(df$Timestamp, label = TRUE)
detach("package:lubridate", unload = TRUE)
library(lubridate, warn.conflicts = FALSE)
df$month <- month(df$Timestamp, label = TRUE)
df$month <- as.character(df$month)
unique(df$month)
df$hour <- hour(df$Timestamp)
unique(df$hour)
df$day.of.the.week <- wday(df$Timestamp, label = TRUE)
unique(df$day.of.the.week)
df$Male <- as.character(df$Male)
library(labeling)
library(rmarkdown)
df$hour <- hour(df$Timestamp)
order(unique(df$hour))
library(crayon)
df$hour <- hour(df$Timestamp)
hours <- unique(df$hours)
order(hours)
df$hour <- hour(df$Timestamp)
hours <- unique(df$hours)
hours
df$hour <- hour(df$Timestamp)
hours <- unique(df$hours)
hours
df$hour <- hour(df$Timestamp)
hours <- unique(df$hour)
hours
df$hour <- hour(df$Timestamp)
hours <- unique(df$hour)
order(hours)
df$hour <- hour(df$Timestamp)
hours <- unique(df$hour)
sort(hours)
df$hour <- hour(df$Timestamp)
hours <- unique(df$hour)
sort(hours)
count(hours)
df$hour <- hour(df$Timestamp)
hours <- unique(df$hour)
sort(hours)
sum(hours)
df$hour <- hour(df$Timestamp)
hours <- unique(df$hour)
sort(hours)
sum(hours)
df$hour <- hour(df$Timestamp)
hours <- unique(df$hour)
sort(hours)
print("Number of unique values in the column hour")
sum(hours)
library(lubridate, warn.conflicts = FALSE)
df<- read.csv('C:/Users/Admin/Downloads/advertising.csv')
head(df)
ncol(df)
nrow(df)
summary(df)
head(df)
tail(df)
colnames(df)
duplicated_rows <- df[duplicated(df),]
nrow(duplicated_rows)
nrow(df)
df <- df[!duplicated(df), ]
nrow(df)
colSums(is.na(df))
boxplot(df$Daily.Time.Spent.on.Site, main = "Daily Time Spent on Site")
boxplot(df$Age, main = 'Age')
boxplot(df$Area.Income, main = 'The User\'s Income')
boxplot(df$Daily.Internet.Usage, main = 'Daily Internet Usage')
boxplot.stats(df$Area.Income)$out
df$Timestamp <- ymd_hms(df$Timestamp)
df$Male <- as.character(df$Male)
df$Male[df$Male == "0"] <- "Female"
df$Male[df$Male == "1"] <- "Male"
unique(df$Male)
names(df)[names(df) == "Male"] <- "Gender"
colnames(df)
df$Clicked.on.Ad <- as.character(df$Clicked.on.Ad)
df$Clicked.on.Ad[df$Clicked.on.Ad == "0"] <- "No"
df$Clicked.on.Ad[df$Clicked.on.Ad == "1"] <- "Yes"
unique(df$Clicked.on.Ad)
devtools::install_github("tidyverse/lubridate")
library(lubridate, warn.conflicts = FALSE)
df$month <- month(df$Timestamp, label = TRUE)
df$month <- as.character(df$month)
unique(df$month)
df$hour <- hour(df$Timestamp)
hours <- unique(df$hour)
sort(hours)
print("Number of unique values in the column hour")
sum(hours)
df$day.of.the.week <- wday(df$Timestamp, label = TRUE)
unique(df$day.of.the.week)
head(df)
Daily_Time_1 <- mean(df$Daily.Time.Spent.on.Site)
Daily_Time_1
Age_3 <- mean(df$Age)
Age_3
area_income_2 <- mean(df$Area.Income)
area_income_2
Usage_2 <- mean(df$Daily.Internet.Usage)
Usage_2
Daily_Time <- median(df$Daily.Time.Spent.on.Site)
Daily_Time
Age_2 <- median(df$Age)
Age_2
area_income_2 <- median(df$Area.Income)
area_income_2
Usage_1 <- median(df$Daily.Internet.Usage)
Usage_1
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
age_1 <- getmode(df$Age)
print(age_1)
time_spent <- getmode(df$Daily.Time.Spent.on.Site)
print(time_spent)
Income_1 <- getmode(df$Income)
print(Income_1)
internet_usage <- getmode(df$Daily.Internet.Usage)
print(internet_usage)
topic_1 <- getmode(df$Ad.Topic.Line)
print(topic_1)
city_1 <- getmode(df$City)
print(city_1)
country_1 <- getmode(df$Country)
print(country_1)
gender_1 <- getmode(df$Gender)
print(gender_1)
clicked_1 <- getmode(df$Clicked.on.Ad)
print(clicked_1)
month_1 <- getmode(df$month)
print(month)
day_of_the_week <- getmode(df$day.of.the.week)
print(day_of_the_week)
hour_1 <- getmode(df$hour)
print(hour_1)
result <- getmode(df$month)
print(result)
# Give the chart file a name.
png(file = "histogram.png")
# Create the histogram.
hist(df$Age, xlab = "Age",col = "grey",border = "black")
# Create the histogram.
hist(df$Daily.Time.Spent.on.Site, xlab = "Daily Time Spent on Site",col = "grey",border = "black")
library(lubridate, warn.conflicts = FALSE)
library(lubridate, warn.conflicts = FALSE)
# Create the histogram.
hist(df$Daily.Time.Spent.on.Site, main = "Daily.Time.Spent.on.Site",  xlab = "Daily Time Spent on Site",col = "grey",border = "black")
df$dates <- format(as.POSIXct(strptime(df$Timestamp,"%d/%m/%Y %H:%M",tz="")) ,format = "%d/%d/%Y")
colnames(df)
df$dates
df$date
df$dates
ymd(df$Timestamp)
df$Timestamp
date(df$Timestamp)
df$date <- date(df$Timestamp)
plot(df$date, df$Daily.Time.Spent.on.Site[df$Clicked.on.Ad == "Yes"], type="l", col="green", lwd=5, xlab="time", ylab="concentration")
plot(df$date, df$Daily.Time.Spent.on.Site[df$Clicked.on.Ad == "Yes"], type="l", col="green", lwd=5, xlab="time", ylab="concentration")
plot(df$date, df$Daily.Time.Spent.on.Site[df$Clicked.on.Ad == "Yes"], type="l", col="green", lwd=2, xlab="time", ylab="concentration")
plot(df$date, df$Daily.Time.Spent.on.Site[df$Clicked.on.Ad == "Yes"], type="l", col="green", lwd=2,)
plot(df$date, df$Daily.Time.Spent.on.Site[df$Clicked.on.Ad == "Yes"], type="l", col="green")
LGI <- ggplot() + geom_line(aes(y=Daily.Time.Spent.on.Site, x=date), size=0.8, colour="blue", data = df[df$Clicked.on.Ad == "Yes"]) + geom_line(aes(y=Daily.Time.Spent.on.Site, x=date), size=0.8, colour="blue", data = df[df$Clicked.on.Ad == "No"])
LGI <- ggplot() + geom_line(aes(y=Daily.Time.Spent.on.Site, x=date),
size=0.8,
colour="blue",
data = df) +
geom_line(aes(y=Daily.Time.Spent.on.Site, x=date),
size=0.8,
colour="blue",
data = df)
LGI <- ggplot() + geom_line(aes(y=Daily.Time.Spent.on.Site, x=date),
size=0.8,
colour="blue",
data = df) +
geom_line(aes(y=Daily.Time.Spent.on.Site, x=date),
size=0.8,
colour="blue",
data = df)
LGI
a = df[df$Clicked.on.Ad=="Yes"]
a = df[df$Clicked.on.Ad == "Yes"]
a <- df[df$Clicked.on.Ad == "Yes"]
df[df$Clicked.on.Ad == "Yes"]
df[df$Clicked.on.Ad == "Yes",]
a <- df[df$Clicked.on.Ad == "Yes",]
b = df[df$Clicked.on.Ad=="No",]
LGI <- ggplot() + geom_line(aes(y=Daily.Time.Spent.on.Site, x=date),
size=0.8,
colour="blue",
data = a) +
geom_line(aes(y=Daily.Time.Spent.on.Site, x=date),
size=0.8,
colour="blue",
data = b)
LGI
a <- df[df$Clicked.on.Ad == "Yes",]
b = df[df$Clicked.on.Ad=="No",]
LGI <- ggplot() + geom_line(aes(y=Daily.Time.Spent.on.Site, x=date),
size=0.8,
colour="red",
data = a) +
geom_line(aes(y=Daily.Time.Spent.on.Site, x=date),
size=0.8,
colour="blue",
data = b)
LGI
a <- df[df$Clicked.on.Ad == "Yes",]
b = df[df$Clicked.on.Ad=="No",]
LGI <- ggplot() + geom_line(aes(y=Daily.Time.Spent.on.Site, x=date),
size=0.2,
colour="red",
data = a) +
geom_line(aes(y=Daily.Time.Spent.on.Site, x=date),
size=0.2,
colour="blue",
data = b)
LGI
a <- df[df$Clicked.on.Ad == "Yes",]
b = df[df$Clicked.on.Ad=="No",]
LGI <- ggplot() + geom_area(aes(y=Daily.Time.Spent.on.Site, x=date),
size=0.2,
colour="red",
data = a) +
geom_area(aes(y=Daily.Time.Spent.on.Site, x=date),
size=0.2,
colour="blue",
data = b)
LGI
a <- df[df$Clicked.on.Ad == "Yes",]
b = df[df$Clicked.on.Ad=="No",]
LGI <- ggplot() + geom_area(aes(y=Daily.Time.Spent.on.Site, x=date),
colour="red",
data = a) +
geom_area(aes(y=Daily.Time.Spent.on.Site, x=date),
colour="blue",
data = b)
LGI
a <- df[df$Clicked.on.Ad == "Yes",]
b = df[df$Clicked.on.Ad=="No",]
LGI <- ggplot() + geom_density(aes(y=Daily.Time.Spent.on.Site, x=date),
size=0.2,
colour="red",
data = a) +
geom_density(aes(y=Daily.Time.Spent.on.Site, x=date),
size=0.2,
colour="blue",
data = b)
LGI
a <- df[df$Clicked.on.Ad == "Yes",]
b = df[df$Clicked.on.Ad=="No",]
LGI <- ggplot() + geom_line(aes(y=Daily.Time.Spent.on.Site, x=date),
size=0.2,
colour="red",
data = a) +
geom_line(aes(y=Daily.Time.Spent.on.Site, x=date),
size=0.2,
colour="blue",
data = b)
LGI
a <- df[df$Clicked.on.Ad == "Yes",]
b = df[df$Clicked.on.Ad=="No",]
LGI <- ggplot() + geom_line(aes(y=Daily.Time.Spent.on.Site, x=date),
size=0.1,
colour="red",
data = a) +
geom_line(aes(y=Daily.Time.Spent.on.Site, x=date),
size=0.1,
colour="blue",
data = b)
LGI
a <- df[df$Clicked.on.Ad == "Yes",]
b = df[df$Clicked.on.Ad=="No",]
LGI <- ggplot() + geom_line(aes(y=Daily.Time.Spent.on.Site, x=date),
size=1,
colour="red",
data = a) +
geom_line(aes(y=Daily.Time.Spent.on.Site, x=date),
size=1,
colour="blue",
data = b)
LGI
a <- df[df$Clicked.on.Ad == "Yes",]
b = df[df$Clicked.on.Ad=="No",]
LGI <- ggplot() + geom_line(aes(y=Daily.Time.Spent.on.Site, x=date),
size=0.1,
colour="red",
data = a) +
geom_line(aes(y=Daily.Time.Spent.on.Site, x=date),
size=0.1,
colour="blue",
data = b)
LGI
LGI_1 <- ggplot() + geom_line(aes(y=Area.Income, x=date),
size=0.1,
colour="red",
data = a) +
geom_line(aes(y=Area.Income, x=date),
size=0.1,
colour="blue",
data = b)
LGI_1
